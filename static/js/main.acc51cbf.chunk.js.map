{"version":3,"sources":["components/map/Maps.js","components/drivers/DriverList.js","Body.js","index.js"],"names":["WrappedMap","withScriptjs","withGoogleMap","props","isMarkerShown","zoom","center","lat","lng","drivers","map","driver","key","user","id","position","latlng","Maps","className","googleMapURL","loadingElement","style","height","containerElement","mapElement","DriverList","index","data-index","onClick","driverPosition","first_name","last_name","Body","state","e","preventDefault","arr","target","dataset","setState","console","log","this","Component","ReactDOM","render","document","getElementById"],"mappings":"yxCAkDA,IAAMA,EAAaC,uBAAaC,yBA7ChC,SAAaC,GACV,OACC,6BACIA,EAAMC,cAmBJ,kBAAC,YAAD,CACMC,KAAMF,EAAME,KACZC,OAAQ,CACEC,IAAIJ,EAAMI,IACVC,IAAKL,EAAMK,MAItBC,IAAcC,KAAI,SAACC,GAAD,OACtB,kBAAC,SAAD,CACKC,IAAKD,EAAOE,KAAKC,GACjBC,SAAU,CACRR,IAAKI,EAAOE,KAAKG,OAAOT,IACxBC,IAAKG,EAAOE,KAAKG,OAAOR,WA/BlC,kBAAC,YAAD,CACMH,KAAM,EACNC,OAAQ,CACEC,IAAK,UACLC,KAAM,YAGfC,IAAcC,KAAI,SAACC,GAAD,OACnB,kBAAC,SAAD,CACGC,IAAKD,EAAOE,KAAKC,GACjBC,SAAU,CACPR,IAAKI,EAAOE,KAAKG,OAAOT,IACxBC,IAAKG,EAAOE,KAAKG,OAAOR,gBA+B7B,SAASS,EAAKd,GACzB,OACI,yBAAKe,UAAU,OACf,kBAAClB,EAAD,CACImB,aAAY,gIACZC,eAAgB,yBAAKC,MAAO,CAAEC,OAAQ,UACtCC,iBAAkB,yBAAKF,MAAO,CAAEC,OAAQ,UACxCE,WAAY,yBAAKH,MAAO,CAAEC,OAAQ,UAClClB,cAAiBD,EAAMC,cACvBG,IAAOJ,EAAMI,IACbC,IAAOL,EAAMK,IACbH,KAAQF,EAAME,QCrCXoB,MAtBf,SAAoBtB,GAEZ,OACI,yBAAKe,UAAU,gBACX,+CACCT,IAAcC,KAAI,SAACC,EAAQe,GAAT,OAChB,wBACKR,UAAU,cACVS,aAAYD,EACZd,IAAKc,EACLA,MAAOA,EACPZ,GAAIH,EAAOE,KAAKC,GAChBc,QAASzB,EAAM0B,gBAEdlB,EAAOE,KAAKiB,WARlB,IAQ+BnB,EAAOE,KAAKkB,gBCoC/CC,G,mNA3CbC,MAAQ,CACN1B,IAAK,GACLC,IAAK,GACLJ,eAAe,EACfC,KAAM,G,EAGRwB,eAAiB,SAACK,GAEhBA,EAAEC,iBACF,IAAIC,EAAM3B,IACJiB,EAAQQ,EAAEG,OAAOC,QAAQZ,MAC3BnB,EAAM6B,EAAIV,GAAOb,KAAKG,OAAOT,IAC7BC,EAAM4B,EAAIV,GAAOb,KAAKG,OAAOR,IAE7B,EAAK+B,SAAS,CACNnC,eAAe,EACfC,KAAM,EACNE,IAAKA,EACLC,IAAKA,IACN,WACKgC,QAAQC,IAAI,EAAKR,MAAM1B,KACvBiC,QAAQC,IAAI,EAAKR,MAAMzB,KACvBgC,QAAQC,IAAI,EAAKR,MAAM7B,eACvBoC,QAAQC,IAAI,EAAKR,MAAM5B,U,uDAIjC,IAAD,OACP,OACE,yBAAKa,UAAU,QACZ,kBAACD,EAAD,CACKb,cAAesC,KAAKT,MAAM7B,cAC1BC,KAAMqC,KAAKT,MAAM5B,KACjBE,IAAKmC,KAAKT,MAAM1B,IAChBC,IAAKkC,KAAKT,MAAMzB,MAErB,kBAAC,EAAD,CAAYqB,eAAgB,SAACK,GAAD,OAAO,EAAKL,eAAeK,W,GAvC3CS,cCJnBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.acc51cbf.chunk.js","sourcesContent":["import React from 'react';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker } from 'react-google-maps';\n\nimport * as drivers from '../../test_api_response.json'\n\nfunction Map(props) {\n   return (\n    <div>\n      {!props.isMarkerShown ? \n        <GoogleMap \n              zoom={4} \n              center={{ \n                        lat: 39.011902, \n                        lng: -98.484245         \n                      }}\n              >\n              {drivers.users.map((driver) =>(\n              <Marker                       \n                 key={driver.user.id} \n                 position={{ \n                    lat: driver.user.latlng.lat, \n                    lng: driver.user.latlng.lng \n                  }} \n              />\n              ))}\n         </GoogleMap>\n         : \n          <GoogleMap \n                zoom={props.zoom} \n                center={{\n                          lat:props.lat, \n                          lng: props.lng\n                        }\n                      }\n              >\n              {drivers.users.map((driver) =>(\n           <Marker                       \n                key={driver.user.id} \n                position={{ \n                  lat: driver.user.latlng.lat, \n                  lng: driver.user.latlng.lng \n               }} \n              />\n              ))}\n           </GoogleMap>\n    }\n    </div>\n  )               \n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\nexport default function Maps(props) {\n    return (\n        <div className=\"map\">\n        <WrappedMap \n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyAff_wMo0dnJ7dOag7rEQ2MEcE6Y8tfXLA&v=3.exp&libraries=geometry,drawing,places`} \n            loadingElement={<div style={{ height: \"100%\" }} />}\n            containerElement={<div style={{ height: \"100%\" }} />}\n            mapElement={<div style={{ height: \"100%\" }} />}\n            isMarkerShown = {props.isMarkerShown}\n            lat = {props.lat}\n            lng = {props.lng}\n            zoom = {props.zoom}\n        />\n      </div>\n    )\n}\n\n","import React from 'react';\n\nimport * as drivers from '../../test_api_response.json'\n\nfunction DriverList(props) {\n\n        return (\n            <div className=\"drivers-list\">\n                <h1>List of drivers</h1>\n                {drivers.users.map((driver, index) =>(\n                   <li \n                        className=\"driver-info\"     \n                        data-index={index} \n                        key={index}\n                        index={index} \n                        id={driver.user.id}\n                        onClick={props.driverPosition}\n                    >                      \n                        {driver.user.first_name} {driver.user.last_name} \n                   </li>\n                ))}       \n            </div>\n        )\n    }\n\n\nexport default DriverList\n","import React, { Component } from 'react';\nimport Maps from './components/map/Maps'\nimport DriverList from './components/drivers/DriverList';\n\nimport * as drivers from './test_api_response.json'\n\n\nimport './components/styles/style.css';\n\nclass Body extends Component {\n\n  state = {\n    lat: '',\n    lng: '',\n    isMarkerShown: false,\n    zoom: 4\n  }\n\n  driverPosition = (e) => {\n    \n    e.preventDefault();\n    let arr = drivers.users\n    const index = e.target.dataset.index;\n    let lat = arr[index].user.latlng.lat;\n    let lng = arr[index].user.latlng.lng;\n         \n        this.setState({\n                isMarkerShown: true,\n                zoom: 7,\n                lat: lat,\n                lng: lng\n            }, () => { \n                    console.log(this.state.lat)            \n                    console.log(this.state.lng)            \n                    console.log(this.state.isMarkerShown)            \n                    console.log(this.state.zoom)            \n                }\n            ) \n}\nrender() {\n  return (\n    <div className=\"Body\">\n       <Maps \n            isMarkerShown={this.state.isMarkerShown} \n            zoom={this.state.zoom} \n            lat={this.state.lat} \n            lng={this.state.lng} \n        />\n       <DriverList driverPosition={(e) => this.driverPosition(e)}/>\n    </div>\n  );\n}\n}\n\nexport default Body;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Body from './Body';\n\n\nReactDOM.render(<Body />, document.getElementById('root'));"],"sourceRoot":""}